{"version":3,"sources":["components/inputAlert.tsx","components/searchForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputAlert","errorState","className","data-state","type","xmlns","aria-hidden","focusable","width","height","viewBox","fill","d","iconPath","message","ActionType","inputError","inputSuccess","SearchForm","setSearchTerm","React","useState","inputTerm","setInputTerm","setErrorState","searchRef","useRef","formElementRef","alertElementRef","validationRegex","RegExp","current","getAttribute","removeAttribute","setAttribute","id","action","method","ref","onSubmit","evt","preventDefault","test","trim","handleSubmit","htmlFor","name","autoCapitalize","autoCorrect","required","pattern","onChange","target","value","aria-atomic","role","reducer","state","LOADING_COCKTAILS","status","ERROR_LOADING_COCKTAILS","LOADED_COCKTAILS","cocktails","payload","App","useReducer","dispatch","searchTerm","abortController","AbortController","useEffect","a","abort","fetch","signal","response","json","jsonResponse","drinks","fetchCocktails","map","cocktail","index","key","idDrink","href","strDrink","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAOe,SAASA,EAAT,GAEmB,IADhCC,EAC+B,EAD/BA,WAEA,OACE,4BAAQC,UAAU,QAAQC,aAAYF,EAAWG,MAC/C,yBACEF,UAAU,cACVG,MAAM,6BACNC,cAAY,OACZC,UAAU,QACVC,MAAM,MACNC,OAAO,MACPC,QAAQ,aAER,0BAAMC,KAAK,eAAeC,EAAGX,EAAWY,YAE1C,uBAAGX,UAAU,kBAAkBD,EAAWa,UCFhD,IClBKC,EDkBCC,EAAyB,CAC7BZ,KAAM,QACNU,QAAS,2CACTD,SACE,wbAGEI,EAA6B,CACjCb,KAAM,UACNU,QAAS,4CACTD,SACE,2HAGW,SAASK,EAAT,GAEmB,IADhCC,EAC+B,EAD/BA,cAC+B,EACGC,IAAMC,SAAS,IADlB,mBACxBC,EADwB,KACbC,EADa,OAEKH,IAAMC,SAASL,GAFpB,mBAExBf,EAFwB,KAEZuB,EAFY,KAIzBC,EAAYL,IAAMM,OAAyB,MAC3CC,EAAiBP,IAAMM,OAAwB,MAC/CE,EAAkBR,IAAMM,OAAyB,MAGjDG,EAAkB,IAAIC,OACzBL,GACCA,EAAUM,SACVN,EAAUM,QAAQC,aAAa,YAC/B,uBAuCJ,OAhCMP,GAAaA,EAAUM,UACzBN,EAAUM,QAAQE,gBAAgB,YAClCR,EAAUM,QAAQE,gBAAgB,YAEhCN,GAAkBA,EAAeI,SACnCJ,EAAeI,QAAQG,aAAa,aAAc,IA4BpD,oCACE,0BACEC,GAAG,aACHC,OAAO,IACPlC,UAAU,4BACVmC,OAAO,OACPC,IAAKX,EACLY,SAAU,SAACC,GAAD,OA7BhB,SAAsBA,GAGpB,GAFAA,EAAIC,kBAECZ,EAAgBa,KAAKpB,EAAUqB,QAKlC,OAJAnB,EAAcR,QACVS,GAAaA,EAAUM,SACzBN,EAAUM,QAAQG,aAAa,eAAgB,SAO/CT,GAAaA,EAAUM,SACzBN,EAAUM,QAAQE,gBAAgB,gBAGpCd,EAAcG,GACdE,EAAcP,GAWe2B,CAAaJ,KAEtC,2BAAOK,QAAQ,UAAf,oBACA,yBAAK3C,UAAU,wBACb,2BACEE,KAAK,OACL0C,KAAK,SACLX,GAAG,SACHY,eAAe,OACfC,YAAY,MACZV,IAAKb,EACLwB,UAAQ,EAGRC,QAAQ,sBACRC,SAAU,SAACX,GAAD,OAAejB,EAAaiB,EAAIY,OAAOC,UAEnD,4BAAQjD,KAAK,SAASF,UAAU,UAC9B,0BAAMA,UAAU,mBAAhB,oBACA,yBACEG,MAAM,6BACNC,cAAY,OACZC,UAAU,QACVC,MAAM,MACNC,OAAO,MACPC,QAAQ,aAER,0BACEC,KAAK,eACLC,EAAE,uJAMZ,yBACE0C,cAAY,OACZC,KAAK,QACLjB,IAAKV,EACL1B,UAAU,iBAEV,kBAACF,EAAD,CAAYC,WAAYA,MClHhC,SAASuD,EACPC,EACArB,GAEA,OAAQA,EAAOhC,MACb,KAAKW,EAAW2C,kBACd,MAAO,CACLC,OAAQ5C,EAAW2C,mBAEvB,KAAK3C,EAAW6C,wBACd,MAAO,CACLD,OAAQ5C,EAAW6C,yBAEvB,KAAK7C,EAAW8C,iBACd,MAAO,CACLF,OAAQ5C,EAAW8C,iBACnBC,UAAW1B,EAAO2B,SAEtB,QACE,OAAON,I,SAxCR1C,K,sCAAAA,E,kDAAAA,E,qCAAAA,M,KA4CL,IAyEeiD,EAzEO,WAAO,IAAD,EACA5C,IAAM6C,WAAWT,EAAS,CAClDG,OAAQ5C,EAAW2C,oBAFK,mBACnBD,EADmB,KACZS,EADY,OAKU9C,IAAMC,SAAS,aALzB,mBAKnB8C,EALmB,KAKPhD,EALO,KAOpBiD,EAAkBhD,IAAMM,OAAO,IAAI2C,iBAgCzC,OA9BAjD,IAAMkD,WAAU,WAyBd,OAxBoB,uCAAG,8BAAAC,EAAA,6DAGrBH,EAAgBrC,QAAQyC,QACxBJ,EAAgBrC,QAAU,IAAIsC,gBAE9BH,EAAS,CAAE9D,KAAMW,EAAW2C,oBANP,kBAQIe,MAAM,4DAAD,OACkCN,GAC5D,CAAEO,OAAQN,EAAgBrC,QAAQ2C,SAVjB,cAQbC,EARa,gBAYQA,EAASC,OAZjB,OAYbC,EAZa,OAanBX,EAAS,CACP9D,KAAMW,EAAW8C,iBACjBE,QAASc,EAAaC,SAfL,kDAkBnBZ,EAAS,CAAE9D,KAAMW,EAAW6C,0BAlBT,0DAAH,oDAsBpBmB,GAEO,WACLX,EAAgBrC,QAAQyC,WAEzB,CAACL,IAGF,0BAAMjE,UAAU,sBACd,yBAAKA,UAAU,YACb,wBAAIA,UAAU,mBAAd,8BACA,kBAACgB,EAAD,CAAYC,cAAeA,IAC3B,6BAASjB,UAAU,QACjB,4BACoB,4BAAjBuD,EAAME,QACL,gDAEgB,sBAAjBF,EAAME,QAAkC,yCACvB,qBAAjBF,EAAME,QAAiCF,EAAMK,UAC5CL,EAAMK,UAAUkB,KAAI,SAACC,EAAoBC,GAArB,OAClB,wBACEhF,UAAS,cAASgF,EAAQ,IAAM,GAAK,eACrCC,IAAKF,EAASG,SAEd,uBACEC,KAAI,8CAAyCJ,EAASG,QAAlD,YAA6DH,EAASK,WAEzEL,EAASK,cAKhB,8CCnGMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2da8fc29.chunk.js","sourcesContent":["import React from 'react';\nimport { ErrorState } from './searchForm';\n\ntype InputAlertProps = {\n  errorState: ErrorState;\n};\n\nexport default function InputAlert({\n  errorState,\n}: InputAlertProps): JSX.Element {\n  return (\n    <figure className=\"alert\" data-state={errorState.type}>\n      <svg\n        className=\"alert__icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        aria-hidden=\"true\"\n        focusable=\"false\"\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path fill=\"currentColor\" d={errorState.iconPath} />\n      </svg>\n      <p className=\"alert__content\">{errorState.message}</p>\n    </figure>\n  );\n}\n","import React from 'react';\nimport InputAlert from './inputAlert';\n\ntype SearchFormProps = {\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;\n};\n\ntype InputError = {\n  type: string;\n  message: string;\n  iconPath: string;\n};\n\ntype InputSuccess = {\n  type: string;\n  message: string;\n  iconPath: string;\n};\n\nexport type ErrorState = InputError | InputSuccess;\n\nconst inputError: InputError = {\n  type: 'error',\n  message: 'Please search for at least 3 characters.',\n  iconPath:\n    'M11.148 4.374a.973.973 0 01.334-.332c.236-.143.506-.178.756-.116s.474.216.614.448l8.466 14.133a.994.994 0 01-.155 1.192.99.99 0 01-.693.301H3.533a.997.997 0 01-.855-1.486zM9.432 3.346l-8.47 14.14c-.422.731-.506 1.55-.308 2.29s.68 1.408 1.398 1.822c.464.268.976.4 1.475.402H20.47a3 3 0 002.572-4.507L14.568 3.346a2.995 2.995 0 00-4.123-1.014c-.429.26-.775.615-1.012 1.014zM11 9v4a1 1 0 002 0V9a1 1 0 00-2 0zm2 8a1 1 0 10-2 0 1 1 0 002 0z',\n};\n\nconst inputSuccess: InputSuccess = {\n  type: 'success',\n  message: \"Yay! You'll see the search results below.\",\n  iconPath:\n    'M19.293 5.293L9 15.586l-4.293-4.293a.999.999 0 10-1.414 1.414l5 5a.999.999 0 001.414 0l11-11a.999.999 0 10-1.414-1.414z',\n};\n\nexport default function SearchForm({\n  setSearchTerm,\n}: SearchFormProps): JSX.Element {\n  const [inputTerm, setInputTerm] = React.useState('');\n  const [errorState, setErrorState] = React.useState(inputError);\n\n  const searchRef = React.useRef<HTMLInputElement>(null);\n  const formElementRef = React.useRef<HTMLFormElement>(null);\n  const alertElementRef = React.useRef<HTMLInputElement>(null);\n  /* get regex pattern from HTML Element, or\n     use static fallback */\n  const validationRegex = new RegExp(\n    (searchRef &&\n      searchRef.current &&\n      searchRef.current.getAttribute('pattern')) ||\n      '([a-zA-Z0-9].*?){3}',\n  );\n\n  function validate(): void {\n    /* remove HTML validation attributes\n       if using JavaScript;\n       handles user feedback with role=\"alert\" element */\n    if (searchRef && searchRef.current) {\n      searchRef.current.removeAttribute('required');\n      searchRef.current.removeAttribute('pattern');\n    }\n    if (formElementRef && formElementRef.current) {\n      formElementRef.current.setAttribute('novalidate', '');\n    }\n  }\n\n  validate();\n\n  function handleSubmit(evt: React.SyntheticEvent): void {\n    evt.preventDefault();\n\n    if (!validationRegex.test(inputTerm.trim())) {\n      setErrorState(inputError);\n      if (searchRef && searchRef.current) {\n        searchRef.current.setAttribute('aria-invalid', 'true');\n      }\n      return;\n    }\n\n    // required because arria-invalid will be true if\n    // triggering the error state first\n    if (searchRef && searchRef.current) {\n      searchRef.current.removeAttribute('aria-invalid');\n    }\n\n    setSearchTerm(inputTerm);\n    setErrorState(inputSuccess);\n  }\n\n  return (\n    <>\n      <form\n        id=\"searchForm\"\n        action=\"/\"\n        className=\"[ search__form ] [ flow ]\"\n        method=\"POST\"\n        ref={formElementRef}\n        onSubmit={(evt): void => handleSubmit(evt)}\n      >\n        <label htmlFor=\"search\">Search Cocktails</label>\n        <div className=\"inline-field-control\">\n          <input\n            type=\"text\"\n            name=\"search\"\n            id=\"search\"\n            autoCapitalize=\"none\"\n            autoCorrect=\"off\"\n            ref={searchRef}\n            required\n            // pattern checks if at least 3 characters or digits\n            // are typed in\n            pattern=\"([a-zA-Z0-9].*?){3}\"\n            onChange={(evt): void => setInputTerm(evt.target.value)}\n          />\n          <button type=\"submit\" className=\"button\">\n            <span className=\"visually-hidden\">Search Cocktails</span>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              aria-hidden=\"true\"\n              focusable=\"false\"\n              width=\"1em\"\n              height=\"1em\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                fill=\"currentColor\"\n                d=\"M11.293 5.707L16.586 11H5a1 1 0 000 2h11.586l-5.293 5.293a.999.999 0 101.414 1.414l7-7a1.006 1.006 0 000-1.414l-7-7a.999.999 0 10-1.414 1.414z\"\n              />\n            </svg>\n          </button>\n        </div>\n      </form>\n      <div\n        aria-atomic=\"true\"\n        role=\"alert\"\n        ref={alertElementRef}\n        className=\"search__alert\"\n      >\n        <InputAlert errorState={errorState} />\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport SearchForm from './components/searchForm';\n\nenum ActionType {\n  LOADING_COCKTAILS = 'LOADING_COCKTAILS',\n  ERROR_LOADING_COCKTAILS = 'ERROR_LOADING_COCKTAILS',\n  LOADED_COCKTAILS = 'LOADED_COCKTAILS',\n}\n\ntype AppState<T> =\n  | { status: ActionType.LOADING_COCKTAILS }\n  | { status: ActionType.ERROR_LOADING_COCKTAILS }\n  | { status: ActionType.LOADED_COCKTAILS; cocktails: T };\n\ntype Action<T> =\n  | { type: ActionType.LOADING_COCKTAILS }\n  | { type: ActionType.ERROR_LOADING_COCKTAILS }\n  | { type: ActionType.LOADED_COCKTAILS; payload: T };\n\ntype Cocktail = {\n  idDrink: string;\n  strDrink: string;\n};\n\nfunction reducer(\n  state: AppState<Cocktail[]>,\n  action: Action<Cocktail[]>,\n): AppState<Cocktail[]> {\n  switch (action.type) {\n    case ActionType.LOADING_COCKTAILS:\n      return {\n        status: ActionType.LOADING_COCKTAILS,\n      };\n    case ActionType.ERROR_LOADING_COCKTAILS:\n      return {\n        status: ActionType.ERROR_LOADING_COCKTAILS,\n      };\n    case ActionType.LOADED_COCKTAILS:\n      return {\n        status: ActionType.LOADED_COCKTAILS,\n        cocktails: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nconst App: React.FC = () => {\n  const [state, dispatch] = React.useReducer(reducer, {\n    status: ActionType.LOADING_COCKTAILS,\n  });\n\n  const [searchTerm, setSearchTerm] = React.useState('Margarita');\n\n  const abortController = React.useRef(new AbortController());\n\n  React.useEffect(() => {\n    const fetchCocktails = async (): Promise<void> => {\n      // abort the previous request to avoid\n      // unnecessary data fetching\n      abortController.current.abort();\n      abortController.current = new AbortController();\n\n      dispatch({ type: ActionType.LOADING_COCKTAILS });\n      try {\n        const response = await fetch(\n          `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${searchTerm}`,\n          { signal: abortController.current.signal },\n        );\n        const jsonResponse = await response.json();\n        dispatch({\n          type: ActionType.LOADED_COCKTAILS,\n          payload: jsonResponse.drinks as Cocktail[],\n        });\n      } catch (error) {\n        dispatch({ type: ActionType.ERROR_LOADING_COCKTAILS });\n      }\n    };\n\n    fetchCocktails();\n\n    return (): void => {\n      abortController.current.abort();\n    };\n  }, [searchTerm]);\n\n  return (\n    <main className=\"center text-center\">\n      <div className=\"[ flow ]\">\n        <h1 className=\"search__heading\">TypeScript Cocktail Search</h1>\n        <SearchForm setSearchTerm={setSearchTerm} />\n        <section className=\"list\">\n          <ul>\n            {state.status === 'ERROR_LOADING_COCKTAILS' && (\n              <p>An error occured.</p>\n            )}\n            {state.status === 'LOADING_COCKTAILS' && <p>Loading...</p>}\n            {state.status === 'LOADED_COCKTAILS' && state.cocktails ? (\n              state.cocktails.map((cocktail: Cocktail, index: number) => (\n                <li\n                  className={`box ${index % 2 !== 0 && 'box__invert'}`}\n                  key={cocktail.idDrink}\n                >\n                  <a\n                    href={`https://www.thecocktaildb.com/drink/${cocktail.idDrink}-${cocktail.strDrink}`}\n                  >\n                    {cocktail.strDrink}\n                  </a>\n                </li>\n              ))\n            ) : (\n              <p>No result.</p>\n            )}\n          </ul>\n        </section>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}